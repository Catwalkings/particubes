keywords: ["particubes", "game", "mobile", "scripting", "cube", "voxel", "world"]
type: "Block"
description: |
    A `Block` represents one block in a [Shape] or [MutableShape] (like the [Map]).

    A `Block` can be built with one of the [constructors](/reference/block#constructors), but it can also be obtained from a [Shape] or [MutableShape] with [Shape.GetBlock](/reference/shape#functions-getblock) or [MutableShape.GetBlock](/reference/mutableshape#functions-getblock).

constructors: 
  - description: |
      Creates a `Block` with `{0,0,0}` coordinates. ([Block.Position](#property-position))

      [Block.PaletteIndex](#property-paletteindex) is set to `paletteIndex`, but [Block.Properties](#property-properties) remains [nil] before the block is added to a [MutableShape] (owns the [Palette]).

    arguments:
    - name: "paletteIndex"
      type: "number"
  - description: |
      Creates a `Block` with `{x,y,z}` coordinates. ([Block.Position](#property-position))

      [Block.PaletteIndex](#property-paletteindex) is set to `paletteIndex`, but [Block.Properties](#property-properties) remains [nil] before the block is added to a [Shape] or [MutableShape] (owns the [Palette]).
    arguments:
    - name: "paletteIndex"
      type: "number"
    - name: "x"
      type: "number"
    - name: "y"
      type: "number"
    - name: "z"
      type: "number"
        
  - description: |
      Creates a `Block` with `position` coordinates. ([Block.Position](#property-position))

      [Block.PaletteIndex](#property-paletteindex) is set to `paletteIndex`, but [Block.Properties](#property-properties) remains [nil] before the block is added to a [MutableShape] (owns the [Palette]).
    arguments: 
    - name: "paletteIndex"
      type: "number"
    - name: "position"
      type: "Number3"

properties:
    - name: "PaletteIndex"
      type: "number"
      description: |
          Block's palette index. (first index is `1`)

          ⚠️ [Block.Properties](#property-properties) remains [nil] if the block does not belong to a [Shape] or [MutableShape] (instances owning a [Palette]).

    - name: "Position"
      read-only: true
      type: "Number3"
      description: "Block's position in parent [Shape] or [MutableShape]"
    - name: "X"
      read-only: true
      type: "number"
      description: "Shortcut to `Position.X`"
    - name: "Y"
      read-only: true
      type: "number"
      description: "Shortcut to `Position.Y`"
    - name: "Z"
      read-only: true
      type: "number"
      description: "Shortcut to `Position.Z`"
    - name: "Properties"
      read-only: true
      type: "BlockProperties"
      description: |
          Returns Block's [BlockProperties].

          [nil] if the [Block] does not belong to a [Shape] or [MutableShape].

functions:
    - name: "AddNeighbor"
      description: |
          Adds a `Block`, adjacent to the face passed as parameter.

          ⚠️ Won't work if the Block is not part of a [MutableShape].
      arguments:
        - name: "block"
          type: "Block"
        - name: "face"
          type: "BlockFace"
      samples:
        - code: |
            -- add block when Action2 is triggered
            Client.Action2 = function()
              -- cast a ray, see if it touches a block
              local impact = Player:CastRay()
              if impact.Block ~= nil then
                -- add block, adjacent to the face that's been touched
                impact.Block:AddNeighbor(Block(1), impact.FaceTouched)
              end
            end
          media: "/media/block-add-neighbor.mp4"

    - name: "Remove"
      description: |
          Removes the `Block` from its parent [MutableShape].

          ⚠️ Won't work if the Block is not part of a [MutableShape].
      samples:
        - code: |
            -- remove block when Action2 is triggered
            Client.Action2 = function()
              -- cast a ray, see if it touches a block
              local impact = Player:CastRay()
              -- won't do anything if impact.Block is nil
              impact.Block:Remove()
            end

    - name: "Replace"
      description: |
          Replaces the `Block` with the one passed as parameter. The position remains the same, [Block.PaletteIndex](#property-paletteindex) is the only property being set.

          ⚠️ Won't work if the Block is not part of a [MutableShape].
      arguments:
        - name: "block"
          type: "Block"
      samples:
        - code: |
            -- replace block when Action2 is triggered
            Client.Action2 = function()
              -- cast a ray, see if it touches a block
              local impact = Player:CastRay()
              -- won't do anything if impact.Block is nil
              impact.Block:Replace(Block(1)) -- make it a block with PaletteIndex == 1
            end

