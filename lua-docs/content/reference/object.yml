keywords: ["particubes", "game", "mobile", "scripting", "object", "voxel"]
type: "Object"
description: |
  An `Object` is the most basic thing that can be added to the game 3D scene.

  It has a position, a rotation and a scale and can contain child [Object]s, including [Object] extensions like [Shape].

  An object by itself does not render anything on screen, but it can contain [Shape]s and thus become a parent coordinate system for them.

  An `Object` can also take part to the physic simulation when setting [Object.Physics](#property-physics) to `true`.

constructors:
  - description: "Creates an Object."
    samples:
      - code: |
          local o = Object()
          Map:AddChild(o) -- adds o to the Map (top level object in the game scene)

properties:

    - name: "Acceleration"
      type: "Number3"
      description: |
          [This]'s continuous acceleration.

          Default value: `{0,0,0}`.

          ⚠️ `Acceleration` is [nil] and can't be set if [This].[Physics](#property-physics) is `false`.
      samples:
        - code: |
            -- Acceleration can be used to compensate gravity: 
            myObject.Acceleration = -Config.ConstantAcceleration
            -- myObject's acceleration is now the invert of 
            -- Config.ConstantAcceleration, cancelling it.

    - name: "CollisionGroups"
      type: "CollisionGroups"
      description: |
          Collision groups the [This] belongs to. 

          ⚠️ It doesn't mean the [This] will collide with other [Object]s in these groups. 

          If the [This] belongs to group number `3` for example, it means all [Object]s that have group number `3` in their [Object].[CollidesWithGroups](#property-collideswithgroups) property will collide with it.

          By default:
          - [Object]s collide with the [Map] and other [Object]s
          - [Player]s collide with the [Map] only

          That can all be configured differently depening on your needs.

      samples:
        - code: |
            local object1 = Object()
            local object2 = Object()
            -- It's not mandatory to set Physics to true
            -- An object with Physics set to false contributes to the
            -- physics simulation as a static item (can't be moved)
            object1.Physics = true
            object2.Physics = true

            -- making sure 2 objects collide with each other
            -- NOTE: by default:
            -- Map.CollisionGroups == {1},
            -- Player.CollisionGroups == {2},
            -- Object.CollisionGroups == {3}
            object1.CollisionGroups = {5}
            object2.CollisionGroups = {5}
            object1.CollidesWithGroups = {1, 5} -- collides with Map + objects in group 5
            object2.CollidesWithGroups = {1, 5} -- collides with Map + objects in group 5

            -- would also work this way if you don't 
            -- remember Map's group (which can be changed too by the way)
            object1.CollidesWithGroups = Map.CollisionGroups + {5}

            -- making an object collides with the Map and Players
            local object = Object()
            object.CollidesWithGroups = Map.CollisionGroups + Player.CollisionGroups

            -- for Player (local player) to collide with other players and the Map
            Player.CollidesWithGroups = Map.CollisionGroups + Player.CollisionGroups

    - name: "CollidesWithGroups"
      type: "CollisionGroups"
      description: |
          Collision groups the [This] collides with. 

          By default:
          - [Object]s collide with the [Map] and other [Object]s
          - [Player]s collide with the [Map] only

          That can all be configured differently depening on your needs.

      samples:
        - code: |
            local object = Object()
            -- It's not mandatory to set Physics to true
            -- An object with Physics set to false contributes to the
            -- physics simulation as a static item (can't be moved)
            object.Physics = true

            -- making an object collide with the Map and Players
            object.CollidesWithGroups = Map.CollisionGroups + Player.CollisionGroups

            -- for an Object to collide with other objects only
            -- (won't collide with the map)
            object.CollidesWithGroups = object.CollisionGroups

            -- for Player (local player) to collide with other players and the Map
            Player.CollidesWithGroups = Map.CollisionGroups + Player.CollisionGroups

            -- making sure 2 objects collide with each others
            -- NOTE: by default:
            -- Map.CollisionGroups == {1},
            -- Player.CollisionGroups == {2},
            -- Object.CollisionGroups == {3}
            local object1 = Object()
            local object2 = Object()
            object1.CollisionGroups = {5}
            object2.CollisionGroups = {5}
            object1.CollidesWithGroups = {1, 5} -- collides with Map + objects in group 5
            object2.CollidesWithGroups = {1, 5} -- collides with Map + objects in group 5

            -- would also work this way if you don't 
            -- remember Map's group (which can be changed too by the way)
            object1.CollidesWithGroups = Map.CollisionGroups + {5}


    - name: "Physics"
      type: "boolean"
      description: |
          Turns physic simulation on/off when set.

          ⚠️ When turned on, [This].[Velocity](#property-velocity) & [This].[Motion](#property-motion) are set to `{0,0,0}`.

    - name: "OnCollision"
      type: "function"
      description: |
          [nil] by default. Can be set to a function that will be triggered when the [This] collides with another [Object].

          The function is called with 2 parameters: the object the callback was set for and the other actor in the collision. 
      samples:
        - code: |
            object.OnCollision = function(o1, o2)
              -- `o1` is `object` here
              print("collision detected between", o1, "and", o2)
            end

    - name: "Position"
      type: "Number3"
      description: |
          Position of the [This] in the world.
      samples:
        - code: |
            local o = Object()
            -- places the object where the local player is
            o.Position = Player.Position

    - name: "IsOnGround"
      type: "boolean"
      read-only: true
      description: |
          `true` when the [This] is not falling.

          ⚠️ `IsOnGround` only makes sense when [This].Physics is `true`.

    - name: "IsHidden"
      type: "boolean"
      description: |
          Can be set to `true` for the [This] to be hidden.
          Nothing else changes, the [This] remains in the scene and it keeps being affected by the simulation (collisions, etc.).

    - name: "LocalPosition"
      type: "Number3"
      description: |
        Position of the [This] in its parent.
        In other words, `LocalPosition` refers to the position of the [This] relative to the `{0,0,0}` position of its parent.

    - name: "Rotation"
      type: "Number3"
      description: |
          Rotation of the [This] in the world (as seen on screen).

          While it usually works for simple operations (like `Rotation.X = Rotation.X + someAngle`), we advise you to use [Number3].[Rotate](/reference/number3#functions-rotate) to rotate an object around X, Y & Z axis.

          You can also set unit vectors like [This].[Up](#property-up), [This].[Right](#property-right) or [This].[Forward](#property-forward) to orient your object.
      samples:
        - code: |
            local o = Object()
            o.Rotation = {0, math.pi, 0}
            -- o revolved half a turn on Y axis

            -- another way to rotate the object:
            o.Forward:Rotate({0, 0, math.pi / 2})
            o.Forward = Camera.Forward

    - name: "LocalRotation"
      type: "Number3"
      description: |
          Rotation of the [This] in its parent.

          Nested [Object] local rotations are combined to obtain the "world rotation" ([Object.Rotation](#property-rotation)), the [Object]'s final on-screen rotation.
    
    - name: "Velocity"
      type: "Number3"
      description: |
          Velocity of the [This] in world coordinates.

          ⚠️ `Velocity` is [nil] and can't be set if [This].[Physics](#property-physics) is `false`.
      samples:
        - code: |
            -- makes myObject jump:
            myObject.Velocity.Y = 100

    - name: "Motion"
      type: "Number3"
      description: |
          Be aware, this `Motion` property is a hack regarding laws of physics. (sorry Isaac)

          But it's very practical to move objects without worrying about forces at play.

          This is what's being used by default when you're moving around with your avatar (see [Client.DirectionalPad](/reference/client#property-directionalpad)). It's the reason why you can stop moving horizontally while in the air.

          Basically, `Motion` is a constant velocity that's added to [This].[Velocity](#property-velocity) each frame to obtain the final movement. ([This].[Velocity](#property-velocity) value is not impacted)

          `Motion` is expressed in world coordinates.

          ⚠️ `Motion` is [nil] and can't be set if [This].[Physics](#property-physics) is `false`.
      samples:
        - code: |
            local speed = 10
            myObject.Motion = Camera.Forward * speed
            -- myObject will move in the same direction the camera is currently facing.
            -- If the Camera rotates after this, it won't change where myObject is heading.

    - name: "Scale"
      type: "Number3"
      description: |
          Scale of the [Object], in the world.
      samples:
        - code: |
            myObject.Scale = 2 -- the Object is now 2 times bigger

    - name: "LocalScale"
      type: "number"
      description: |
          Scale of the [Object], in its parent.

          Nested [Object] local scales are combined to obtain the "world scale" ([Object.Scale](#property-scale)), the [Object]'s final on-screen scale.
      samples:
        - code: |
            myObject.LocalScale = 2 -- the Object is now 2 times bigger
        - code: |
            topLevelObject.LocalScale = 2
            local o = Object()
            o.LocalScale = 0.5
            topLevelObject:AddChild(o) -- o becomes a child of topLevelObject
            -- o ends up being displayed with a scale of 1

    - name: "LossyScale"
      read-only: true
      type: "number"
      description: |
          Convenience property that attempts to match the actual world scale as much as it can.

    - name: ColliderOrigin
      type: "Number3"
      description: |
          TODO:

    - name: ColliderSize
      type: "Number3"
      description: |
          TODO:

    - name: Mass
      type: "number"
      description: |
          TODO:

    - name: Friction
      type: "number"
      description: |
          TODO:

    - name: Bounciness
      type: "number"
      description: |
          TODO:

    - name: CollisionBox
      type: "Box"
      description: |
          TODO:

    - name: "ChildrenCount"
      read-only: true
      type: "integer"
      description: "Returns number of child [Object]s."

    - name: "Up"
      type: "Number3"
      description: |
          `Up` is a unit vector (vector with a length of 1). It determines which direction is "up" for the [This].

          Setting it is a way to rotate the [This].

    - name: "Right"
      type: "Number3"
      description: |
          `Right` is a unit vector (vector with a length of 1). It determines which direction is "right" for the [This].

          Setting it is a way to rotate the [This].

    - name: "Forward"
      type: "Number3"
      description: |
          `Forward` is a unit vector (vector with a length of 1). It determines which direction is "forward" for the [This].

          Setting it is a way to rotate the [This].

    - name: "Left"
      type: "Number3"
      description: |
          `Left` is a unit vector (vector with a length of 1). It determines which direction is "left" for the [This].

          Setting it is a way to rotate the [This].

    - name: "Down"
      type: "Number3"
      description: |
          `Down` is a unit vector (vector with a length of 1). It determines which direction is "down" for the [This].

          Setting it is a way to rotate the [This].

    - name: "Backward"
      type: "Number3"
      description: |
          `Backward` is a unit vector (vector with a length of 1). It determines which direction is "backward" for the [This].

          Setting it is a way to rotate the [This].

functions:
    - name: "AddChild"
      argument-sets:
        - 
          - name: "child"
            type: "Object"
        - 
          - name: "child"
            type: "Object"
          - name: "keepWorld"
            type: "boolean"
      description: |
          Adds given [Object] as a child.

          [Object] extensions like [Shape] or [MutableShape] are naturally accepted too.

          By default, when using AddChild, the child maintains it's [LocalPosition](/reference/object#property-localposition). But since the local position remains the same in the new parent, it means the child's world position may change.

          The `keepWorld` optional parameter, `false` by default, can be used to maintain the child's [Position](/reference/object#property-position) (world position) instead. 

          It's also a good practice to set child/parent relationships before setting positions.

      samples:
        - code: |
            local o = Object()
            local myShape = Shape(Items.someuser.someitem)
            o:AddChild(myShape)
    - name: "RemoveChild"
      description: "Unsets parent/child relationship with child parameter. The child ends up being deleted if it has no other references."
      arguments: 
        - name: "child"
          type: "Object"
      samples:
        - code: |
            o:RemoveChild(someChildObject)
    - name: "RemoveChildren"
      description: "Unsets parent/child relationship with all children. Individual children end up being deleted if they have no other references."
      samples:
        - code: |
            o:RemoveChildren()

    - name: "GetChild"
      description: "Get child [Object] at index."
      arguments: 
        - name: "index"
          type: "integer"
      samples:
        - code: |
            if o.ChildrenCount > 0 then
              print(o:GetChild(1)) -- prints first child
            end

    - name: "GetParent"
      description: "Get [This]'s parent."
      samples:
        - code: |
            print(myObject:GetParent())

    - name: "SetParent"
      description: |
          Sets parent/child relationship with parent parameter. [nil] can be used to remove the [Object] from its parent.

          By default, when using SetParent, the child maintains it's [LocalPosition](/reference/object#property-localposition). But since the local position remains the same in the new parent, it means the child's world position may change.

          The `keepWorld` optional parameter, `false` by default, can be used to maintain the child's [Position](/reference/object#property-position) (world position) instead. 

          It's also a good practice to set child/parent relationships before setting positions.

      argument-sets:
        - 
          - name: "parent"
            type: "Object"
        - 
          - name: "parent"
            type: "Object"
          - name: "keepWorld"
            type: "boolean"
      samples:
        - code: |
            local o = Object()
            o:SetParent(Map) -- o is now a child of the map
            -- (Map is an extension of Object)

    - name: "RemoveFromParent"
      description: "Removes the [This] from its parent. Doesn't do anything if the [This] has no parent."
      samples:
        - code: |
            o:RemoveFromParent()

    - name: "PositionLocalToWorld"
      description: "Converts a local position to world coordinate system."
      arguments: 
        - name: "p"
          type: "Number3"
      return:
        - type: "Number3"
      samples:
        - code: |
            local p = Number3(1, 2, 3)
            local pInWorldCoords = myObject:PositionLocalToWorld(p)

    - name: "PositionWorldToLocal"
      description: "Converts a world position to local coordinate system."
      arguments: 
        - name: "p"
          type: "Number3"
      return:
        - type: "Number3"
      samples:
        - code: |
            local p = Number3(1, 2, 3)
            local pInLocalCoords = myObject:PositionWorldToLocal(p)

    - name: "RotateLocal"
      description: "Object:RotateLocal(number3) -- euler angles\nObject:RotateLocal(number3, number) -- axis angle"
      argument-sets:
        - 
          - name: "angles"
            type: "Number3"
        - 
          - name: "axis"
            type: "Number3"
          - name: "angle"
            type: "number"

    - name: "RotateWorld"
      description: "Object:RotateWorld(number3) -- euler angles\nObject:RotateWorld(number3, number) -- axis angle"
      argument-sets:
        - 
          - name: "angles"
            type: "Number3"
        - 
          - name: "axis"
            type: "Number3"
          - name: "angle"
            type: "number"

    - name: "RotationLocalToWorld"
      description: "Converts a local rotation to world coordinate system."
      arguments: 
        - name: "p"
          type: "Number3"
      return:
        - type: "Number3"

    - name: "RotationWorldToLocal"
      description: "Converts a world rotation to local coordinate system."
      arguments: 
        - name: "p"
          type: "Number3"
      return:
        - type: "Number3"

    - name: "TextBubble"
      description: "TODO:"
      argument-sets:
        - 
          - name: "text"
            type: "string"
        - 
          - name: "text"
            type: "string"
          - name: "duration"
            type: "number"
        - 
          - name: "text"
            type: "string"
          - name: "duration"
            type: "number"
          - name: "offset"
            type: "number"
        - 
          - name: "text"
            type: "string"
          - name: "duration"
            type: "number"
          - name: "offset"
            type: "number"
          - name: "color"
            type: "Color"
        - 
          - name: "text"
            type: "string"
          - name: "duration"
            type: "number"
          - name: "offset"
            type: "number"
          - name: "color"
            type: "Color"
          - name: "bgColor"
            type: "Color"
        - 
          - name: "text"
            type: "string"
          - name: "duration"
            type: "number"
          - name: "offset"
            type: "number"
          - name: "color"
            type: "Color"
          - name: "bgColor"
            type: "Color"
          - name: "tail"
            type: "boolean"

    - name: "CollidesWith"
      description: "TODO: Object:CollidesWith(self, other)"
      arguments: 
        - name: "self"
          type: "Object"
        - name: "other"
          type: "Object"
      return:
        - type: "boolean"

    - name: "ApplyForce"
      description: "TODO: Object:ApplyForce(self, value)"
      arguments: 
        - name: "self"
          type: "Object"
        - name: "value"
          type: "Number3"
  
    - name: "ClearTextBubble"
      description: "TODO: Object:ClearTextBubble()"
      arguments: 
        - name: "self"
          type: "Object"