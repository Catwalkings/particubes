keywords: ["particubes", "game", "mobile", "scripting", "cube", "voxel", "world"]
type: "Client"
description: |
    Client is available on each client (each user device). It contains everything needed for the local simulation.

    Client is nil in the [Server] execution context.

functions:
    - name: "OpenChatInput"
      description: |
        Opens the chat input.

    - name: "OpenGameMenu"
      description: |
        Shows the game menu.

        From there, players can exit or resume the game.

properties:
    - name: "Action1"
      type: "function"
      description: |
          Triggered when pressing action 1 button. (space bar by default with a keyboard)
      samples:
        - code: |
            Client.Action1 = function()
              print("action1")
            end

    - name: "Action1Release"
      type: "function"
      description: |
          Triggered when releasing action 1 button. (space bar by default with a keyboard)
      samples:
        - code: |
            Client.Action1Release = function()
              print("action1 released")
            end

    - name: "Action2"
      type: "function"
      description: |
          Triggered when pressing action 2 button. (left click by default when using a mouse)
      samples:
        - code: |
            Client.Action2 = function()
              print("action2")
            end
            
    - name: "Action2Release"
      type: "function"
      description: |
          Triggered when releasing action 2 button. (left click by default when using a mouse)
      samples:
        - code: |
            Client.Action2Release = function()
              print("action2 released")
            end

    - name: "Action3"
      type: "function"
      description: |
          Triggered when pressing action 3 button. (right click by default when using a mouse)
      samples:
        - code: |
            Client.Action3 = function()
              print("action3")
            end
            
    - name: "Action3Release"
      type: "function"
      description: |
          Triggered when releasing action 3 button. (left click by default when using a mouse)
      samples:
        - code: |
            Client.Action3Release = function()
              print("action3 released")
            end

    - name: "Camera"
      type: "Camera"
      description: "See [Camera]."

    - name: "Clouds"
      type: "Clouds"
      description: "See [Clouds]."

    - name: "DirectionalPad"
      type: "function"
      description: |
          Triggered when what we call the "direction pad" or "D-pad" is activated. 

          The D-pad maps to the direction keys when using a keyboard (WASD by default).

          When using a touch screen, the D-pad is by default represented by the virtual pad that's on the left side of the screen.

          The function receives 2 arguments `x` & `y` to represent 8 possible directions or the idle state:

          `0,0 -> IDLE`
          `0,1 -> UP`, `1,0 -> RIGHT`, `0,-1 -> DOWN`, `-1,0 -> LEFT`
          `√2,√2 -> UP/RIGHT`, `√2,-√2 -> DOWN/RIGHT`, `-√2,-√2 -> DOWN/LEFT`, `-√2,√2 -> UP/LEFT`

          The norm (or length) of the (x,y) vector is always `1.0`, or `0.0` when idle.
      samples:
        - code: |
            -- DEFAULT IMPLEMENTATION
            -- (those functions can be redefined)

            Client.DirectionalPad = function(x, y)
              if Player ~= nil then
                -- save values to update motion when AnalogPad is used
                dpadX = x
                dpadY = y
                Player.Motion = (Player.Forward * dpadY + Player.Right * dpadX) * 10
              end
            end

            Client.AnalogPad = function(x, y)
              if Player ~= nil then
                -- rotate player
                Player.Rotation.Y = Player.Rotation.Y + y
                Player.Rotation.X = Player.Rotation.X + x
                -- update motion force
                dpadX = dpadX or 0.0 -- 0.0 if dpadX has never been set
                dpadY = dpadY or 0.0 -- 0.0 if dpadY has never been set
                Player.Motion = (Player.Forward * dpadY + Player.Right * dpadX) * 10
              end
            end

    - name: "DPad"
      type: "function"
      description: |
          Shortcut to [DirectionalPad](/reference/client#property-directionalpad).

    - name: "AnalogPad"
      type: "function"
      description: |
          Triggered when what we call the "analog pad" or "A-pad" is activated. 

          The A-pad maps to the mouse mouvements when using a mouse.

          When using a touch screen, the A-pad is activated when moving the finger after a touch down from anywhere outside the [DirectionalPad](/reference/client#property-directionalpad).

          The function receives 2 arguments `dx` & `dy` to represent the delta compared to the previous position. When both `dx` & `dy` are equal to `0.0`, it means the pad is back to idle state.

      samples:
        - code: |
            -- DEFAULT IMPLEMENTATION
            -- (those functions can be redefined)

            Client.DirectionalPad = function(x, y)
              if Player ~= nil then
                -- save values to update motion when AnalogPad is used
                dpadX = x
                dpadY = y
                Player.Motion = (Player.Forward * dpadY + Player.Right * dpadX) * 10
              end
            end

            Client.AnalogPad = function(x, y)
              if Player ~= nil then
                -- rotate player
                Player.Rotation.Y = Player.Rotation.Y + y
                Player.Rotation.X = Player.Rotation.X + x
                -- update motion force
                dpadX = dpadX or 0.0 -- 0.0 if dpadX has never been set
                dpadY = dpadY or 0.0 -- 0.0 if dpadY has never been set
                Player.Motion = (Player.Forward * dpadY + Player.Right * dpadX) * 10
              end
            end

    - name: "APad"
      type: "function"
      description: |
          Shortcut to [AnalogPad](/reference/client#property-analogpad).

    - name: "Fog"
      type: "Fog"
      description: "See [Fog]."

    - name: "Inputs"
      type: "Inputs"
      description: "See [Inputs]."

    - name: "OnPlayerJoin"
      type: "function"
      description: |
          Triggered when a player joins the game.

          It doens't mean the [Player] has spawned, just that there's a new connection.
      samples:
        - code: |
            Client.OnPlayerJoin = function(player)
              print(player.Username .. " joined the game!")
            end

    - name: "OnPlayerLeave"
      type: "function"
      description: |
          Triggered when a player leaves the game.
      samples:
        - code: |
            Client.OnPlayerLeave = function(player)
              print("So long " .. player.Username .. "!")
            end

    - name: "OnStart"
      type: "function"
      description: |
          Triggered when the game starts.

          This is the very first Lua function to be called, a good place to initialize variables.
      samples:
        - code: |
            Client.OnStart = function()
              -- place player above the top center of the map
              Player.Position = {Map.Width / 2, Map.Height + 10, Map.Depth / 2}
              -- make it spawn!
              Player:Spawn()
            end

    - name: "Player"
      type: "Player"
      description: "See [Player]."

    - name: "Tick"
      type: "function"
      description: |
          Executed ~30 times per second. Provides the elapsed time in seconds as parameter.
      samples:
        - code: |
            -- executed ~30 times per second on each user device
            Client.Tick = function(dt)
              print("elapsed:", dt, "seconds")
            end

    - name: "UI"
      type: "UI"
      description: "See [UI]."

    - name: "Pointer"
      type: "Pointer"
      description: "See [Pointer]."


