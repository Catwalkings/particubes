keywords: ["particubes", "game", "mobile", "scripting", "cube", "voxel", "world"]
type: "Camera"
extends: "Object"
description: |
  Camera is a shortcut to [Client].[Camera].

  Controls camera movement and position.

properties:
    # inherited from Object, hiding it for now though because untested
    - name: "ChildrenCount"
      hide: true
    - name: "LocalScale"
      hide: true
    - name: "Physics"
      hide: true
    - name: "Velocity"
      hide: true
    - name: "Motion"
      hide: true

    - name: "Target"
      types:
        - "Number3"
        - "Block"
        - "Object"
      description: |
          What [Camera] is looking at. 

          `Target` accepts several types:
          - [Number3], for a position in world coordinates.
          - [Block], for the [Camera] to look at the center of it.
          - [Object] (including extensions like [Shape] or [MutableShape]), for the [Camera] to look at the center of it.


    - name: "DistanceFromTarget"
      type: "number"
      description: "Distance (in [Map] blocks) between [Camera] and its target."

functions:
    # inherited from Object, hiding it for now though because untested
    - name: "AddChild"
      hide: true
    - name: "GetChild"
      hide: true
    - name: "PositionLocalToWorld"
      hide: true
    - name: "PositionWorldToLocal"
      hide: true
    - name: "RemoveChild"
      hide: true
    - name: "RemoveChildren"
      hide: true
    - name: "RemoveFromParent"
      hide: true
    - name: "RotationLocalToWorld"
      hide: true
    - name: "RotationWorldToLocal"
      hide: true
    - name: "SetParent"
      hide: true

    - name: "CastRay"
      return: 
        - type: "Impact" 
      description: |
          Casts a ray and returns an [Impact] (can be [nil]).

          The [Impact] contains information about the kind of thing that's been hit.
      samples:
        - code: |
            local impact = Camera:CastRay()
            if impact.Block ~= nil then
              print("block hit:", impact.Block)
            end

    - name: "SetModeThirdPerson"
      description: |
          Puts Camera in "third person" mode. (looking at local [Player], from a behind-the-shoulder perspective)
      samples:
        - code: |
            Camera:SetModeThirdPerson()

    - name: "SetModeSatellite"
      description: |
          When in that mode, the camera rotates around its [Target](#property-target) property.
      samples:
        - code: |
            Camera:SetModeSatellite()

    - name: "FitToScreen"
      description: |
          Fits the target to the screen.

          `screenRatio` indicates the percentage of the screen that should be covered by the target.

          When `spherize` is `true`, a sphere that contains the target is used to place the camera.
      arguments:
        - name: "target"
          type: "Shape"
        - name: "screenRatio"
          type: "number"
        - name: "spherize"
          type: "boolean"
      samples:
        - code: |
            local myShape = Shape(R.usename.myShape)
            Map:AddChild(myShape)
            Camera:FitToScreen(myShape, 0.6, false)
            -- the shape now covers 60% of the screen

